
import org.bytedeco.javacpp.DoublePointer
import org.bytedeco.javacpp.gsl._
// dimensions of matrices
var  M = 20

// create sample arrays of 1s as matrices
  var  a = Rand(M*M)
  
  var  xa = new DoublePointer(a: _*)
  
  
  var m = gsl_matrix_view_array(xa, M, M)
  
  var eval = gsl_vector_complex_alloc(M)
  var evec = gsl_matrix_complex_alloc(M, M)
  
  var w = gsl_eigen_nonsymmv_alloc(M)
  
  gsl_eigen_nonsymmv(m.matrix, eval, evec, w)
  
  gsl_eigen_nonsymmv_free(w)
  
  gsl_eigen_nonsymmv_sort(eval, evec, GSL_EIGEN_SORT_ABS_DESC)
  
  var evals = new RDDA(M, 2)
  var evecsReal = new RDDA(M, M)
  var evecsImag = new RDDA(M, M)
  
  for (i<-0 until M) {
      var eval_i = gsl_vector_complex_get( eval, 0)
      
      var evec_i = gsl_matrix_complex_column(evec, i)
      
      // get computed eigenvalues i
      evals(i, 0) = eval_i.dat.get(0)
      evals(i, 1) = eval_i.dat.get(1)
      
      // get computed eigenvector i
      for (j<- 0 until M) {
          var z = gsl_vector_complex_get(evec_i.vector, j)
          evecsReal(i, j) = z.dat.get(0)
          evecsImag(i, j) = z.dat.get(1)
          }
        }
          
  
        gsl_vector_complex_free(eval)
        gsl_matrix_complex_free(evec)
        
        
      
       
