
//  this example requires the installation of the fastICA toolbox

//          Creates a FastICA standard configuration:

var t = inc(0, 0.01, 10)
var N = t.length  // signal size
var sig1 = sin(2.3*t)+1.23*cos(0.663*t)
var sig2 = cos(0.2*sig1)
var noise = vrand(N)
var initialSigs  = Array.ofDim[Double](3, N)
for (k<-0 to N-1) {
  initialSigs(0)(k) = sig1(k)
  initialSigs(1)(k) = sig2(k)
  initialSigs(2)(k) = noise(k)
}

var numICs = 3
  // mixing matrix
var A = Array.ofDim[Double](3,3)
A(0)(0)=2.1; A(0)(1)= -1.1; A(0)(2)= -3.1;  A(1)(0)= -0.1; A(1)(1)=0.5; A(1)(2) = 0.9;
A(2)(0) = 3.2; A(2)(1) = 0.3; A(2)(2) = -0.7;

   // apply source mixing matrix to mix signals
var mixedSignal = A*initialSigs
var sensorMat = mixedSignal.getv  // get matrix as double[][]

var config = new org.fastica.FastICAConfig(numICs, org.fastica.FastICAConfig.Approach.DEFLATION, 1.0, 1.0e-14, 400, null)
					

// run now the Fast ICA algorithm

// call the ICA algorithm
var fica = new org.fastica.FastICA(sensorMat, numICs) 

var ICAVectors= fica.getICVectors
figure(1);  subplot(3,1,1); plot(sig1); subplot(3,1,2); plot(sig2); subplot(3,1,3); plot(noise); title("Original Signals");

figure(2);   subplot(3,1,1); plot(ICAVectors(0)); subplot(3,1,2); plot(ICAVectors(1));
 subplot(3,1,3); plot(ICAVectors(2)); title("ICA Seperated");


//FastICA(double[][] inVectors, FastICAConfig config, ContrastFunction conFunction, EigenValueFilter evFilter, ProgressListener listener) 
    