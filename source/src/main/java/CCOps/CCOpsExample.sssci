
var ccObj = scalaExec.Interpreter.NativeLibsObj.ccObj  // get the native object for CCMath based operations

// below each example commands should be executed seperately,
// otherwise the same named variables are a compile time error

// 1st example 
 var M = 300
 var N = 300
 var d = Zeros(N)  // returned matrix of singular values
 var MN=M*N
 var a = Rand(MN)  // a random data matrix
 var aa = a.clone
 var u = Zeros(M*M)
 var v = Zeros(N*N)
  tic
  ccObj.svduv(d, a, u, M, v, N)
  var tm = toc
   d 
   
   a
   aa
   

   // 2nd example 
   var M=3; var N=3
   var a = Array(4.5, 6.7, -1.2,  -1.2, 0.3, -1.2, -0.2, 0.3, -0.4)
   
   var d = new Array[Double](M)
   var u = new Array[Double](M*M)
   var v = new Array[Double](N*N)
   
   ccObj.svduv(d, a, u, M, v, N)
   
   d
   var xx = rand(M,N)
   
   tic
   var svdx = svd(xx)
   var tmj = toc
   
   u

   
   // 3nd example
var A = $$(4.5, 6.7, -1.2, null, -1.2, 0.3, -1.2, null,
             -0.2, 0.3, -0.4)
             
var (uA, sA, vA) = svd(A)

// check orthogonality
var uAortho = uA*(uA~)
var vAortho = vA*(vA~)

// check validity of decomposition
uA*diag(sA)*(vA~) - A
